* Clon: A cron-like scheduling library

Clon is a cron-like scheduling library in common-lisp. It serves
as a replacement of traditional cron managers.

Thanks to richer expressiveness of Lisp, it subsumes what a
traditional cron manager can do. For example, the control string
=*/25 5-6,10 * 7 1-3 /bin/echo Hello, world!= can be expressed as
the following. More examples to come!

#+begin_src common-lisp :eval never
(defun m-of-25-p (n) (eql 0 (mod n 25)))
(defun echo (text) (sb-ext:run-program "/bin/echo" (list text)
                                       :output *standard-output*))

(schedule-lambda
 :name "Demo"
 :form ((echo "Hello, world!"))
 :time (:minute '(satisfies m-of-25-p)
        :hour '(or (integer 5 6) (member 10))
        :month 7
        :day-of-week '(integer 0 2)))
#+end_src

[[http://clhs.lisp.se/Body/04_bc.htm][Common Lisp's type specifiers]] are used as the DSL to specify the
time slot. This enables the user to control the time-spec with
freedom [[https://cl-su-ai.cddddr.org/msg01196.html][(1)]].

Notice that you can dry-run the schedule (see below) to inspect
the time of the upcoming events. Also notice that in order to
respect the convention of =#'decode-universal-time=, =(0 1 2 3 4 5
6)= means =(Mon Tue Wed Thu Fri Sat Sun)=. In particular, =(0 1 2)=
means =(Mon Tue Wed)=.

** Examples

*** Basic examples

Here are some easier examples.

#+begin_src common-lisp :eval never
;; 0 */2 * * * echo "Every two hours."
(schedule-lambda
 :name "Demo"
 :form ((echo "Every two hours."))
 :time (:hour '(satisfies evenp)))

;; 0 20 * * 4 echo "8pm on a Thursday."
(schedule-lambda
 :name "Demo"
 :form ((echo "8pm on a Thursday."))
 :time (:hour 20 :day-of-week 3))    ; 0 means Mon, 3 means Thu, and 6 means Sun.
#+end_src

*** Finer than cron

Clon is strictly finer than cron. In particular, the user can
specify its behavior to each second. For example, to make a
thread that prints the universal time every ten seconds, call the
macro =schedule-lambda= as follows.

#+begin_src common-lisp :eval never
(schedule-lambda
 :name "demo"
 :form ((print (get-universal-time)))
 :time (:second '(member 0 10 20 30 40 50)))
#+end_src

*** Unschedule the timers

Unschedule all timers.

#+begin_src common-lisp :eval never
(mapc #'trivial-timers:unschedule-timer
      (trivial-timers:list-all-timers))
#+end_src

*** Dry-run a schedule

It is helpful to inspect the time of the upcoming events. To do
this, we can use the macro =dry-run= to list the time of the
upcoming events. Here is an example that displays for a
complicated schedule.

(Notice that the schedule-definition is equivalent to the control
string =*/25 5-6,10 * 7 1-3= in traditional cron managers.)

#+begin_src common-lisp :eval never
(defun m-of-25-p (n) (eql 0 (mod n 25)))
(dry-run 30 ; display the next 30 instances
         (:minute '(satisfies m-of-25-p)
          :hour '(or (integer 5 6) (member 10))
          :month 7
          :day-of-week '(integer 0 2) ; (0 1 2) means (Mon Tue Wed)
                  ))
#+end_src

This prints the following to =*standard-output*=.

#+begin_src text
;; Ran in May 2021.
@2021-07-05T05:00:00.000000+08:00 ;; Monday
@2021-07-05T05:25:00.000000+08:00
@2021-07-05T05:50:00.000000+08:00
@2021-07-05T06:00:00.000000+08:00
@2021-07-05T06:25:00.000000+08:00
@2021-07-05T06:50:00.000000+08:00
@2021-07-05T10:00:00.000000+08:00
@2021-07-05T10:25:00.000000+08:00
@2021-07-05T10:50:00.000000+08:00
@2021-07-06T05:00:00.000000+08:00 ;; Tuesday
@2021-07-06T05:25:00.000000+08:00
@2021-07-06T05:50:00.000000+08:00
@2021-07-06T06:00:00.000000+08:00
@2021-07-06T06:25:00.000000+08:00
@2021-07-06T06:50:00.000000+08:00
@2021-07-06T10:00:00.000000+08:00
@2021-07-06T10:25:00.000000+08:00
@2021-07-06T10:50:00.000000+08:00
@2021-07-07T05:00:00.000000+08:00 ;; Wednesday
@2021-07-07T05:25:00.000000+08:00
@2021-07-07T05:50:00.000000+08:00
@2021-07-07T06:00:00.000000+08:00
@2021-07-07T06:25:00.000000+08:00
@2021-07-07T06:50:00.000000+08:00
@2021-07-07T10:00:00.000000+08:00
@2021-07-07T10:25:00.000000+08:00
@2021-07-07T10:50:00.000000+08:00
@2021-07-12T05:00:00.000000+08:00 ;; Monday
@2021-07-12T05:25:00.000000+08:00
@2021-07-12T05:50:00.000000+08:00
#+end_src
