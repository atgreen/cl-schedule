* Clon: A cron-like scheduling library

Clon is a cron-like scheduling library in common-lisp. It
subsumes and replaces traditional cron managers thanks to richer
expressiveness of Lisp.

In particular, in an example below we show how to make a =schedule=
that does what a traditional cron manager would do for the
control string =*/25 5-6,10 * 7 1-2=. Long story short, it can be
expressed as the following schedule-definition.

#+begin_src common-lisp :eval never
(defun m-of-25-p (n) (eql 0 (mod n 25)))
(make-typed-cron-schedule
 :minute '(satisfies m-of-25-p)
 :hour '(or (integer 5 6) (member 10))
 :month 7
 :day-of-week '(integer 0 1))
#+end_src

Related projects are [[https://github.com/tsikov/clerk][tsikov's clerk]] and [[https://github.com/ciel-lang/cl-cron/blob/master/cl-cron.lisp][ciel-lang's cl-cron]].
However, to my best knowledge clon is more comprehensive.

** Examples

*** Basic example

To make a thread that prints the universal time every ten
seconds, call the following.

#+begin_src common-lisp :eval never
(schedule-lambda
 :name "demo"
 :form ((print (get-universal-time)))
 :time (:second '(member 0 10 20 30 40 50)))
#+end_src

Here, =schedule-lambda= is a macro that expands the form into the
following.

#+begin_src common-lisp :eval never
(let* (;; create a stateless schedule
       (schedule (make-typed-cron-schedule
                  :second '(member 0 10 20 30 40 50)))
       ;; create a scheduler that remembers the last scheduled time
       (scheduler (make-scheduler schedule)))
  ;; schedule a function as a timer
  ;; this returns a timer object
  (schedule-function (lambda ()
                       (print (get-universal-time)))
                     scheduler))
#+end_src

Unschedule the timer(s).

#+begin_src common-lisp :eval never
;; Unschedule the last timer.
(trivial-timers:unschedule-timer *)
;; Unschedule all timers.
(mapc #'trivial-timers:unschedule-timer
      (trivial-timers:list-all-timers))
#+end_src

*** Dry-run a schedule

It is helpful to inspect the time of the upcoming events. To do
this, we can use the macro =dry-run= to list the time of the
upcoming events. Here is an example that displays the time of the
upcoming events with a complicated schedule. Notice that the
schedule-definition is equivalent to =*/25 5-6,10 * 7 1-3= in
traditional cron managers.

#+begin_src common-lisp :eval never
(defun m-of-25-p (n) (eql 0 (mod n 25)))
(dry-run 30 ; display the next 30 instances
         (:minute '(satisfies m-of-25-p)
          :hour '(or (integer 5 6) (member 10))
          :month 7
          :day-of-week '(integer 0 2) ; (0 1 2) means (Mon Tue Wed)
         ))
#+end_src

#+begin_src text
@2021-07-05T05:00:00.000000+08:00 ;; Monday
@2021-07-05T05:25:00.000000+08:00
@2021-07-05T05:50:00.000000+08:00
@2021-07-05T06:00:00.000000+08:00
@2021-07-05T06:25:00.000000+08:00
@2021-07-05T06:50:00.000000+08:00
@2021-07-05T10:00:00.000000+08:00
@2021-07-05T10:25:00.000000+08:00
@2021-07-05T10:50:00.000000+08:00
@2021-07-06T05:00:00.000000+08:00 ;; Tuesday
@2021-07-06T05:25:00.000000+08:00
@2021-07-06T05:50:00.000000+08:00
@2021-07-06T06:00:00.000000+08:00
@2021-07-06T06:25:00.000000+08:00
@2021-07-06T06:50:00.000000+08:00
@2021-07-06T10:00:00.000000+08:00
@2021-07-06T10:25:00.000000+08:00
@2021-07-06T10:50:00.000000+08:00
@2021-07-07T05:00:00.000000+08:00 ;; Wednesday
@2021-07-07T05:25:00.000000+08:00
@2021-07-07T05:50:00.000000+08:00
@2021-07-07T06:00:00.000000+08:00
@2021-07-07T06:25:00.000000+08:00
@2021-07-07T06:50:00.000000+08:00
@2021-07-07T10:00:00.000000+08:00
@2021-07-07T10:25:00.000000+08:00
@2021-07-07T10:50:00.000000+08:00
@2021-07-12T05:00:00.000000+08:00 ;; Monday
@2021-07-12T05:25:00.000000+08:00
@2021-07-12T05:50:00.000000+08:00
#+end_src

** TODOs [3/4]

1. [X] Extend so that it only emits warnings for skipped actions.
   Also create an option for the next call to be immediate if
   skipped.

2. [X] Better documentation. In particular, teaches the user how
   to express cron expressions like =*/5 7 12 * *= in this package.

3. [X] Document =new/schedule-function= and merge it into
   =schedule-function=, without breaking backward compatibility.

4. [ ] Integrate with jin's =service= utilities, and replace
   =systemd.timer=.
