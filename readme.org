* cl-schedule (v2): a scheduling library in CL

A schedule is a function with a time spec. =cl-schedule= calls
the function according to its time spec.

For example, to run a function every hour on the hour,

#+begin_src lisp
(defun print! (str)
  (format t "~a" str)
  (terpri))

(schedule!
 :func (lambda () (print! "Hello!"))
 :time '(:second 0
         :minute 0))
#+end_src

To run a function every day at 8am and 8pm,

#+begin_src lisp
(schedule!
 :func (lambda () (print! "Hello!"))
 :time '(:second 0
         :minute 0
         :hour   (8 20)))
#+end_src

To run a function every 30 seconds from 8am to 6pm,

#+begin_src lisp
(schedule!
 :func (lambda () (print! "Hello!"))
 :time '(:second (0 30)
         :hour   (integer 8 18)))
#+end_src

The previous example shows that =cl-schedule= integrates Common
Lisp type system into its time spec syntax. For a more
sophisticated example, consider the cron time spec
=*/25 5-6,10 4 7 1-3=,

#+begin_src lisp
(defun m-of-25-p (n) (eql 0 (mod n 25)))
(schedule!
 :func (lambda () (print! "Hello!"))
 :time '(:minute (satisfies m-of-25-p)
         :hour (or (integer 5 6)
                   (member 10))
         :date  4
         :month 7
         :day (integer 0 2))) ; day (0 1 2 3 4 5 6) means (Mon Tue Wed Thu Fri Sat Sun)
#+end_src

You can prepare the function and time spec elsewhere. For
example, the previous example is equivalent to the following

#+begin_src lisp
(let ((func  (lambda () (print! "Hello!")))
      (time '(:minute (satisfies m-of-25-p)
              :hour (or (integer 5 6)
                        (member 10))
              :month 7
              :day (integer 0 2))))
  (schedule! :func func :time time))
#+end_src

The time spec does not have to be in the form of such list.
=cl-schedule= supports any function with one parameter
(interpreted as the universal time). For example, a function that
runs every 10 seconds:

#+begin_src lisp
(schedule!
 :func (lambda () (print! "Hello!")))
 :time (lambda (time)
         (= 0 (mod (decode-universal-time time) 10)))
#+end_src

A overly complicated example that makes use of this power,

#+begin_src lisp
(defun fibonacci? (n)
  (find n '(0 1 2 3 5 8 13 21 34 55)))

(defparameter *a-complicated-time-spec*
  (lambda (time)
    (multiple-value-bind (second minute hour day month year)
        (decode-universal-time time)
      (and (= 0 second minute)
           (not (= 1 month))
           (fibonacci? (* (+ hour day) month))))))

(schedule!
 :func (lambda () (print! "Hello!"))
 :time *a-complicated-time-spec*)
#+end_src

The function =dry-run= generates the next few times that satisfy
a given time spec. For example,

#+begin_src lisp
(assert
 (equal- (mapcar #'local-time:universal-to-timestamp
                 (dry-run '(:second 0
                            :minute 0
                            :hour   (8 20))
                          :init '(2020 1 1 12 59 59)
                          :range (* 3 86400)))
         '(@2020-01-01T20:00:00.000000+08:00
           @2020-01-02T08:00:00.000000+08:00
           @2020-01-02T20:00:00.000000+08:00
           @2020-01-03T08:00:00.000000+08:00
           @2020-01-03T20:00:00.000000+08:00
           @2020-01-04T08:00:00.000000+08:00)))
#+end_src

It works for general time specs too:

#+begin_src lisp
(assert
 (equal- (mapcar #'local-time:universal-to-timestamp
                 (dry-run *a-complicated-time-spec*
                          :init  `(2020 10 10 12 35 59)
                          :range 10000000))
         `(@2020-11-01T04:00:00.000000+08:00
           @2020-11-02T03:00:00.000000+08:00
           @2020-11-03T02:00:00.000000+08:00
           @2020-11-04T01:00:00.000000+08:00
           @2020-11-05T00:00:00.000000+08:00
           @2021-02-01T00:00:00.000000+08:00
           @2021-02-01T03:00:00.000000+08:00
           @2021-02-01T16:00:00.000000+08:00
           @2021-02-02T02:00:00.000000+08:00
           @2021-02-02T15:00:00.000000+08:00
           @2021-02-03T01:00:00.000000+08:00)))
#+end_src

** FAQ

+ Q. What if a schedule is missed? For example, perhaps the OS is
  asleep when a schedule is meant to be run?

+ A. =cl-schedule= does not support re-running or checking the
  schedule. However, it should not be hard to achieve by
  providing functions that remember some information by
  themselves.

+ Q. How to check the history of schedule?

+ A. We will support this soon: the user will be able to check a
  list of times when the schedules have been called by
  =cl-schedule=.
