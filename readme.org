* cl-schedule (v2): a scheduling library in CL

** 1. Installation & Usage

While the older version (v1) is on Quicklisp, the current version
(v2) may not be there yet. To use this program, download it to
your local-projects directory, and evaluate the form in Lisp:

#+begin_src lisp
(ql:quickload :cl-schedule)
#+end_src

** 2. Examples

To run a function every minute

#+begin_src lisp
(defun hello! () (format t "Hello!") (terpri))

(schedule! :func #'hello!
           :time '(:second 0))
#+end_src

A more complicated time-spec that replicates =*/25 5-6,10 4 7 1-3=
(cron-style) is

#+begin_src lisp
(defun m-of-25-p (n) (eql 0 (mod n 25)))

(schedule! :func (lambda () (format t "Hello!") (terpri))
           :time '(:minute (satisfies m-of-25-p)
                   :hour (or (integer 5 6)
                          (member 10))
                   :date  4
                   :month 7
                   ;; day (0 1 2 3 4 5 6) means (Mon Tue Wed Thu Fri Sat Sun)
                   :day (integer 0 2)))
#+end_src

A handy function is =#'dry-run=, which shows you all universal
times (within a specified time range) that satisfy the time-spec.
For example,

#+begin_src lisp
(assert
 (equal- (mapcar #'local-time:universal-to-timestamp
                 (dry-run '(:second 0 ; time-spec
                            :minute 0
                            :hour   (8 20))
                          :init '(2020 1 1 12 59 59)
                          :range (* 3 86400)))
         '(@2020-01-01T20:00:00.000000+08:00
           @2020-01-02T08:00:00.000000+08:00
           @2020-01-02T20:00:00.000000+08:00
           @2020-01-03T08:00:00.000000+08:00
           @2020-01-03T20:00:00.000000+08:00
           @2020-01-04T08:00:00.000000+08:00)))
#+end_src

We support very general time-specs (e.g. any function). For
details, please refer to =doc/time-spec.org=. More examples for
=#'schedule!= can be found in =doc/examples.org=.

** 3. How it works under the hood

There are two threads running in the background, the scheduler
and the dispatcher. The scheduler wakes up every few seconds, and
schedule each schedule in the list =*schedules*= to the hash table
=*actions*=. This hash table has each of its keys being a universal
time, and has each of its values being a list of schedules. The
dispatcher wakes up every second, checks the current universal
time, and run all enabled schedules stored in the corresponding
list.

** 4. FAQ

+ Q. How to contribute?

  A. Please refer to =doc/todo.org=.

+ Q. What if a schedule is missed? For example, perhaps the OS is
  asleep when a schedule is meant to be run?

  A. =cl-schedule= does not support re-running or checking the
  schedule. However, it should not be hard to achieve by
  providing functions that remember some information by
  themselves.

+ Q. How to check the history of schedule?

  A. We will support this soon: the user will be able to check a
  list of times when the schedules have been called by
  =cl-schedule=.
